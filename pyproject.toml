[project]
name = "bournemouth"
version = "0.1.0"
description = "Raggy Graph Chat"
readme = "README.md"
requires-python = ">=3.13"
license = { file = "COPYING" }
authors = [{ name = "Payton McIntosh", email = "pmcintosh@df12.net" }]
dependencies = [
  "falcon>=3.1",
  "SQLAlchemy>=2.0",
  "asyncpg>=0.29",
  "neo4j>=5.20",
  "requests>=2.31",
  "itsdangerous>=2.1",
  "httpx>=0.27",
  "msgspec>=0.19,<0.20",
  "aiosqlite>=0.21.0",
  "falcon-pachinko==0.1.0a1",
  "uuid-v7>=1.0.0",
]

[dependency-groups]
dev = [
  "pytest>=7.0",
  "pytest-asyncio>=0.23",
  "pytest-mock",
  "pytest-httpx>=0.26",
  "freezegun>=1.4",
  "pytest-timeout>=2.4.0",
]
docs = [
  "sphinx>=5.0",
  "sphinx-rtd-theme"
]

cli = [
  "typer>=0.12",
  "textual>=0.51",
]

[project.scripts]
bournemouth-chat = "bournemouth.cli:app"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.uv]
package = true

[tool.uv.sources]
falcon-pachinko = { url = "https://github.com/leynos/falcon-pachinko/releases/download/v0.1.0-alpha1/falcon_pachinko-0.1.0a1-py3-none-any.whl" }

[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportMissingModuleSource = false
reportMissingImports = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownParameterType = false
reportAttributeAccessIssue = false


[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    "F",        # Pyflakes rules
    "W",        # PyCodeStyle warnings
    "E",        # PyCodeStyle errors
    "I",        # Sort imports properly
    "UP",       # Warn if certain things can changed due to newer Python versions
    "C4",       # Catch incorrect use of comprehensions, dict, list, etc
    "FA",       # Enforce from __future__ import annotations
    "ISC",      # Good use of string concatenation
    "ICN",      # Use common import conventions
    "RET",      # Good return practices
    "SIM",      # Common simplification rules
    "TID",      # Some good import practices
    "TC",       # Enforce importing certain types in a TYPE_CHECKING block
    "PTH",      # Use pathlib instead of os.path
    "TD",       # Be diligent with TODO comments
    "A",        # detect shadowed builtins
    "BLE",      # disallow catch-all exceptions
    "S",        # disallow things like "exec"; also restricts "assert" but I just NOQA it when I really need it
    "DTZ",      # require strict timezone manipulation with datetime
    "FBT",      # detect boolean traps
    "N",        # enforce naming conventions, e.g. ClassName vs function_name
    "FURB",
    "B",
    "RUF",
    "LOG",
    "Q",
    "PT",
    "RSE",
    "PERF",
    "TRY",
    "D",
]
per-file-ignores = {"**/test_*.py" = ["S101"]}

[tool.ruff.lint.flake8-import-conventions]
# Declare the banned `from` imports.
banned-from = ["typing", "datetime", "collections.abc", "dataclasses"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
# Ensure asyncio fixtures create a new event loop for each test
asyncio_default_fixture_loop_scope = "function"
timeout = 1

