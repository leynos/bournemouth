asyncapi: '2.6.0'
info:
  title: Bournemouth Chat WebSocket API
  version: '0.1'
servers:
  local:
    url: ws://localhost:8000/chat
    protocol: ws
    description: Local development server
channels:
  chat:
    description: |
      WebSocket channel for chat messages. Multiple requests may be
      processed concurrently, with fragments correlated by
      ``transaction_id``.
    publish:
      summary: Send a chat request
      operationId: sendChat
      message:
        $ref: '#/components/messages/ChatRequest'
    subscribe:
      summary: Receive streaming chat responses
      operationId: receiveChat
      message:
        $ref: '#/components/messages/ChatResponse'
components:
  messages:
    ChatRequest:
      name: ChatRequest
      title: Chat request
      payload:
        $ref: '#/components/schemas/ChatRequest'
    ChatResponse:
      name: ChatResponse
      title: Chat response fragment
      payload:
        $ref: '#/components/schemas/ChatResponse'
    ChatStateRequest:
      name: ChatStateRequest
      title: Stateful chat request
      payload:
        $ref: '#/components/schemas/ChatStateRequest'
    ChatStateResponse:
      name: ChatStateResponse
      title: Stateful chat response fragment
      payload:
        $ref: '#/components/schemas/ChatStateResponse'
  schemas:
    ChatRequest:
      type: object
      properties:
        transaction_id:
          type: string
          description: Correlates request with streamed responses
        message:
          type: string
        model:
          type: string
        history:
          type: array
          items:
            $ref: '#/components/schemas/Message'
      required:
        - transaction_id
        - message
    ChatResponse:
      type: object
      properties:
        transaction_id:
          type: string
        fragment:
          type: string
        finished:
          type: boolean
          description: true when this is the last fragment in the stream
      required:
        - transaction_id
        - fragment
    Message:
      type: object
      properties:
        role:
          type: string
          enum: [system, user, assistant, tool]
        content:
          type: string
      required:
        - role
        - content
    ChatStateRequest:
      type: object
      properties:
        transaction_id:
          type: string
          description: Correlates request with streamed responses
        conversation_id:
          type: string
          format: uuid
          nullable: true
        message:
          type: string
        model:
          type: string
          nullable: true
      required:
        - transaction_id
        - message
    ChatStateResponse:
      type: object
      properties:
        transaction_id:
          type: string
        conversation_id:
          type: string
          format: uuid
        fragment:
          type: string
        finished:
          type: boolean
          description: true when this is the last fragment in the stream
      required:
        - transaction_id
        - conversation_id
        - fragment
